
import hashlib # –±–µ—Ä–µ—Ç —Å—Ç–æ—Ä–∫—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω—É—é —Å—Ç—Ä–æ–∫—É –∏—Å–ø–æ–ª—å–∑—É–µ –¥–ª—è id
from aiogram import Bot, Dispatcher, executor, types, Bot  # mid
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup  # keyboards
from aiogram.utils.callback_data import CallbackData  # cb filter
import random
import asyncio
import re
from collections import defaultdict

TOKEN = '5991863328:AAHf0Fyz3rtMR8851RF3xfyqdzIYNNDbVnM'
bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

def assign_random_numbers(accounts):
    result = []
    for acc in accounts:
        random_numbers = [random.randint(1, 100) for _ in range(5)]
        result.append(f"{acc} {' '.join(map(str, random_numbers))}")
    return result

tg_acc = ["@zxcebajlak231", "@master_74", "@mood_breaker", "@zahar4ik_scam"]
random_assigned = assign_random_numbers(tg_acc)

def get_keybord() -> InlineKeyboardMarkup: #—Å–æ–∑–¥–∞–µ–º –∫–ª–∞–≤—ã –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ —Å–æ–∑–¥–∞—é—Ç –∫–∞–ª–ª–±–µ–∫–¥–∞—Ç—É
    ikb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(
                '–æ—Ç–ø—Ä–∞–≤–∏—Ç—å',
                callback_data = 'ok',
                url="https://t.me/+g_Om0C25L7g3ODFi"
            )],
        ]
    )
    return ikb

# @dp.message_handler()
# async def all_msg_handler(message: types.Message):
#     reply_text = "–û—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ..."
#     await message.reply(reply_text, reply_markup=types.ReplyKeyboardRemove())
@dp.message_handler(commands=['add'])
async def cmd_add_account(message: types.Message):
    new_account = message.text.split()[1]  # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è

    if new_account.startswith('@'):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–∫–∫–∞—É–Ω—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —Å–∏–º–≤–æ–ª–∞ @
        tg_acc.append(new_account)  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç –≤ –º–∞—Å—Å–∏–≤ tg_acc
        random_assigned.append(assign_random_numbers([new_account])[0])  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–ª—è –Ω–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ —Å–ª—É—á–∞–π–Ω—ã–µ —á–∏—Å–ª–∞
        await message.answer(f"–ê–∫–∫–∞—É–Ω—Ç {new_account} –±—ã–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")
    else:
        await message.answer("–û—à–∏–±–∫–∞: –∞–∫–∫–∞—É–Ω—Ç –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å —Å–∏–º–≤–æ–ª–∞ @.")

@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message) -> None:
    user_id = message.from_user.id
    user = message.from_user

    for _ in range(1):
        for item in random_assigned:
            if user.username and user.username in item:
                formatted_item = f'üëë {item}'  # –î–æ–±–∞–≤–ª—è–µ–º emoji –∫–æ—Ä–æ–Ω—ã –∫ –∞–∫–∫–∞—É–Ω—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            else:
                formatted_item = item
            await message.answer(formatted_item, reply_markup=get_keybord())
        await message.answer("üê∏üê∏üê∏*–≠—Ç–æ –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã*üê∏üê∏üê∏  ", parse_mode='MarkdownV2')
        await asyncio.sleep(30)


@dp.message_handler(content_types=types.ContentTypes.TEXT)
async def process_random_numbers(message: types.Message):
    user_id = message.from_user.id
    user = message.from_user
    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —á–∏—Å–µ–ª –∏ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –Ω–∏–º–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    generated_numbers = defaultdict(list)

    # –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–ª–æ–≤–∞—Ä—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏ –∏ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
    for item in random_assigned:
        parts = item.split()  # –†–∞–∑–¥–µ–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –Ω–∞ —á–∞—Å—Ç–∏
        account = parts[0]  # –ü–æ–ª—É—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç
        numbers = list(map(int, parts[1:]))  # –ü–æ–ª—É—á–∞–µ–º —á–∏—Å–ª–∞ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏—Ö –≤ —Å–ø–∏—Å–æ–∫ —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª
        generated_numbers[account] = numbers

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –Ω—É–∂–Ω–æ–≥–æ –ø—Ä–µ—Ñ–∏–∫—Å–∞
    if message.text.startswith("‚ôªÔ∏è –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª:"):
        numbers = re.findall(r'\d+', message.text)
        numbers_list = [int(num) for num in numbers]
        matched_numbers = set()  # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —É–∂–µ —Å–æ–≤–ø–∞–≤—à–∏—Ö —á–∏—Å–µ–ª

        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —á–∏—Å–ª–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å —á–∏—Å–ª–∞–º–∏ –≤ —Å–ª–æ–≤–∞—Ä–µ
        for account, generated in generated_numbers.items():
            matches = sum(1 for num in numbers_list if num in generated and num not in matched_numbers)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∏–π –∞–∫–∫–∞—É–Ω—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            account_username = account[1:] if account.startswith('@') else account
            crown = '' if account_username == user.username else ''  # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞–∫ –∫–æ—Ä–æ–Ω—ã, –µ—Å–ª–∏ —ç—Ç–æ –∞–∫–∫–∞—É–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

            if matches >= 0:
                matched_numbers.update([num for num in numbers_list if num in generated])
                await message.answer(
                    f"{crown}{account} {' '.join(map(str, generated))} —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è {matches}/5 —Å–æ–≤–ø–∞–ª–æ —á–∏—Å–ª–æ {', '.join(map(str, [num for num in numbers_list if num in generated and num not in matched_numbers]))}")
                if matches >= 5:
                    await message.answer(f"{crown}{account} {' '.join(map(str, generated))} –±–∏–Ω–≥–æ")


@dp.callback_query_handler()
async def vote_callback(callback: types.CallbackQuery):
    if callback.data == 'ok':
        return await callback.answer(text='–∫—Ä–∞—Å–∞–≤—á–∏–∫')
    return await callback.answer('2 —Ç–µ–∫—Å—Ç –≤—Å–ø–ª—ã–≤–∞—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è')

if __name__ == '__main__':
    executor.start_polling(
        dispatcher=dp,
        skip_updates=True
    )



